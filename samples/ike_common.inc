#
# (C) Tenable Network Security, Inc.
#
# This script is released under one of the Tenable Script Licenses and may not
# be used from within scripts released under another license without the
# authorization from Tenable Network Security, Inc.
#
# @NOGPL@
#
# $Revision: 1.4 $
#

IKE_PORT              = 500;
IKE_HDR_SIZE          = 28;
IKE_PAYLOAD_HDR_SIZE  = 4;

IKE_MAJOR_VERSION_1   = 1;
IKE_MAJOR_VERSION_2   = 2;

#
# Group description
#
IKE_GROUP_MODP_768    = 1;
IKE_GROUP_MODP_1024   = 2;
IKE_GROUP_EC2N_155    = 3;
IKE_GROUP_EC2N_185    = 4;
IKE_GROUP_MODP_1536   = 5;
IKE_GROUP_MODP_2048   = 14;
IKE_GROUP_MODP_3072   = 15;
IKE_GROUP_MODP_4096   = 16;
IKE_GROUP_MODP_6144   = 17;
IKE_GROUP_MODP_8192   = 18;
# more values in http://www.iana.org/assignments/ipsec-registry

IKE_DH_GENERATOR_2    = raw_string(2);

# in RFC 2409
IKE_DH_GROUP[IKE_GROUP_MODP_768] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x3A,0x36,0x20,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

# in RFC 2409
IKE_DH_GROUP[IKE_GROUP_MODP_1024] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE6,0x53,0x81,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

# in RFC 3526
IKE_DH_GROUP[IKE_GROUP_MODP_1536] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
0xF1,0x74,0x6C,0x08,0xCA,0x23,0x73,0x27,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

# in RFC 3526
IKE_DH_GROUP[IKE_GROUP_MODP_2048] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
0xF1,0x74,0x6C,0x08,0xCA,0x18,0x21,0x7C,0x32,0x90,0x5E,0x46,0x2E,0x36,0xCE,0x3B,
0xE3,0x9E,0x77,0x2C,0x18,0x0E,0x86,0x03,0x9B,0x27,0x83,0xA2,0xEC,0x07,0xA2,0x8F,
0xB5,0xC5,0x5D,0xF0,0x6F,0x4C,0x52,0xC9,0xDE,0x2B,0xCB,0xF6,0x95,0x58,0x17,0x18,
0x39,0x95,0x49,0x7C,0xEA,0x95,0x6A,0xE5,0x15,0xD2,0x26,0x18,0x98,0xFA,0x05,0x10,
0x15,0x72,0x8E,0x5A,0x8A,0xAC,0xAA,0x68,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

# in RFC 3526
IKE_DH_GROUP[IKE_GROUP_MODP_3072] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
0xF1,0x74,0x6C,0x08,0xCA,0x18,0x21,0x7C,0x32,0x90,0x5E,0x46,0x2E,0x36,0xCE,0x3B,
0xE3,0x9E,0x77,0x2C,0x18,0x0E,0x86,0x03,0x9B,0x27,0x83,0xA2,0xEC,0x07,0xA2,0x8F,
0xB5,0xC5,0x5D,0xF0,0x6F,0x4C,0x52,0xC9,0xDE,0x2B,0xCB,0xF6,0x95,0x58,0x17,0x18,
0x39,0x95,0x49,0x7C,0xEA,0x95,0x6A,0xE5,0x15,0xD2,0x26,0x18,0x98,0xFA,0x05,0x10,
0x15,0x72,0x8E,0x5A,0x8A,0xAA,0xC4,0x2D,0xAD,0x33,0x17,0x0D,0x04,0x50,0x7A,0x33,
0xA8,0x55,0x21,0xAB,0xDF,0x1C,0xBA,0x64,0xEC,0xFB,0x85,0x04,0x58,0xDB,0xEF,0x0A,
0x8A,0xEA,0x71,0x57,0x5D,0x06,0x0C,0x7D,0xB3,0x97,0x0F,0x85,0xA6,0xE1,0xE4,0xC7,
0xAB,0xF5,0xAE,0x8C,0xDB,0x09,0x33,0xD7,0x1E,0x8C,0x94,0xE0,0x4A,0x25,0x61,0x9D,
0xCE,0xE3,0xD2,0x26,0x1A,0xD2,0xEE,0x6B,0xF1,0x2F,0xFA,0x06,0xD9,0x8A,0x08,0x64,
0xD8,0x76,0x02,0x73,0x3E,0xC8,0x6A,0x64,0x52,0x1F,0x2B,0x18,0x17,0x7B,0x20,0x0C,
0xBB,0xE1,0x17,0x57,0x7A,0x61,0x5D,0x6C,0x77,0x09,0x88,0xC0,0xBA,0xD9,0x46,0xE2,
0x08,0xE2,0x4F,0xA0,0x74,0xE5,0xAB,0x31,0x43,0xDB,0x5B,0xFC,0xE0,0xFD,0x10,0x8E,
0x4B,0x82,0xD1,0x20,0xA9,0x3A,0xD2,0xCA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

IKE_DH_GROUP[IKE_GROUP_MODP_4096] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
0xF1,0x74,0x6C,0x08,0xCA,0x18,0x21,0x7C,0x32,0x90,0x5E,0x46,0x2E,0x36,0xCE,0x3B,
0xE3,0x9E,0x77,0x2C,0x18,0x0E,0x86,0x03,0x9B,0x27,0x83,0xA2,0xEC,0x07,0xA2,0x8F,
0xB5,0xC5,0x5D,0xF0,0x6F,0x4C,0x52,0xC9,0xDE,0x2B,0xCB,0xF6,0x95,0x58,0x17,0x18,
0x39,0x95,0x49,0x7C,0xEA,0x95,0x6A,0xE5,0x15,0xD2,0x26,0x18,0x98,0xFA,0x05,0x10,
0x15,0x72,0x8E,0x5A,0x8A,0xAA,0xC4,0x2D,0xAD,0x33,0x17,0x0D,0x04,0x50,0x7A,0x33,
0xA8,0x55,0x21,0xAB,0xDF,0x1C,0xBA,0x64,0xEC,0xFB,0x85,0x04,0x58,0xDB,0xEF,0x0A,
0x8A,0xEA,0x71,0x57,0x5D,0x06,0x0C,0x7D,0xB3,0x97,0x0F,0x85,0xA6,0xE1,0xE4,0xC7,
0xAB,0xF5,0xAE,0x8C,0xDB,0x09,0x33,0xD7,0x1E,0x8C,0x94,0xE0,0x4A,0x25,0x61,0x9D,
0xCE,0xE3,0xD2,0x26,0x1A,0xD2,0xEE,0x6B,0xF1,0x2F,0xFA,0x06,0xD9,0x8A,0x08,0x64,
0xD8,0x76,0x02,0x73,0x3E,0xC8,0x6A,0x64,0x52,0x1F,0x2B,0x18,0x17,0x7B,0x20,0x0C,
0xBB,0xE1,0x17,0x57,0x7A,0x61,0x5D,0x6C,0x77,0x09,0x88,0xC0,0xBA,0xD9,0x46,0xE2,
0x08,0xE2,0x4F,0xA0,0x74,0xE5,0xAB,0x31,0x43,0xDB,0x5B,0xFC,0xE0,0xFD,0x10,0x8E,
0x4B,0x82,0xD1,0x20,0xA9,0x21,0x08,0x01,0x1A,0x72,0x3C,0x12,0xA7,0x87,0xE6,0xD7,
0x88,0x71,0x9A,0x10,0xBD,0xBA,0x5B,0x26,0x99,0xC3,0x27,0x18,0x6A,0xF4,0xE2,0x3C,
0x1A,0x94,0x68,0x34,0xB6,0x15,0x0B,0xDA,0x25,0x83,0xE9,0xCA,0x2A,0xD4,0x4C,0xE8,
0xDB,0xBB,0xC2,0xDB,0x04,0xDE,0x8E,0xF9,0x2E,0x8E,0xFC,0x14,0x1F,0xBE,0xCA,0xA6,
0x28,0x7C,0x59,0x47,0x4E,0x6B,0xC0,0x5D,0x99,0xB2,0x96,0x4F,0xA0,0x90,0xC3,0xA2,
0x23,0x3B,0xA1,0x86,0x51,0x5B,0xE7,0xED,0x1F,0x61,0x29,0x70,0xCE,0xE2,0xD7,0xAF,
0xB8,0x1B,0xDD,0x76,0x21,0x70,0x48,0x1C,0xD0,0x06,0x91,0x27,0xD5,0xB0,0x5A,0xA9,
0x93,0xB4,0xEA,0x98,0x8D,0x8F,0xDD,0xC1,0x86,0xFF,0xB7,0xDC,0x90,0xA6,0xC0,0x8F,
0x4D,0xF4,0x35,0xC9,0x34,0x06,0x31,0x99,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

IKE_DH_GROUP[IKE_GROUP_MODP_6144] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
0xF1,0x74,0x6C,0x08,0xCA,0x18,0x21,0x7C,0x32,0x90,0x5E,0x46,0x2E,0x36,0xCE,0x3B,
0xE3,0x9E,0x77,0x2C,0x18,0x0E,0x86,0x03,0x9B,0x27,0x83,0xA2,0xEC,0x07,0xA2,0x8F,
0xB5,0xC5,0x5D,0xF0,0x6F,0x4C,0x52,0xC9,0xDE,0x2B,0xCB,0xF6,0x95,0x58,0x17,0x18,
0x39,0x95,0x49,0x7C,0xEA,0x95,0x6A,0xE5,0x15,0xD2,0x26,0x18,0x98,0xFA,0x05,0x10,
0x15,0x72,0x8E,0x5A,0x8A,0xAA,0xC4,0x2D,0xAD,0x33,0x17,0x0D,0x04,0x50,0x7A,0x33,
0xA8,0x55,0x21,0xAB,0xDF,0x1C,0xBA,0x64,0xEC,0xFB,0x85,0x04,0x58,0xDB,0xEF,0x0A,
0x8A,0xEA,0x71,0x57,0x5D,0x06,0x0C,0x7D,0xB3,0x97,0x0F,0x85,0xA6,0xE1,0xE4,0xC7,
0xAB,0xF5,0xAE,0x8C,0xDB,0x09,0x33,0xD7,0x1E,0x8C,0x94,0xE0,0x4A,0x25,0x61,0x9D,
0xCE,0xE3,0xD2,0x26,0x1A,0xD2,0xEE,0x6B,0xF1,0x2F,0xFA,0x06,0xD9,0x8A,0x08,0x64,
0xD8,0x76,0x02,0x73,0x3E,0xC8,0x6A,0x64,0x52,0x1F,0x2B,0x18,0x17,0x7B,0x20,0x0C,
0xBB,0xE1,0x17,0x57,0x7A,0x61,0x5D,0x6C,0x77,0x09,0x88,0xC0,0xBA,0xD9,0x46,0xE2,
0x08,0xE2,0x4F,0xA0,0x74,0xE5,0xAB,0x31,0x43,0xDB,0x5B,0xFC,0xE0,0xFD,0x10,0x8E,
0x4B,0x82,0xD1,0x20,0xA9,0x21,0x08,0x01,0x1A,0x72,0x3C,0x12,0xA7,0x87,0xE6,0xD7,
0x88,0x71,0x9A,0x10,0xBD,0xBA,0x5B,0x26,0x99,0xC3,0x27,0x18,0x6A,0xF4,0xE2,0x3C,
0x1A,0x94,0x68,0x34,0xB6,0x15,0x0B,0xDA,0x25,0x83,0xE9,0xCA,0x2A,0xD4,0x4C,0xE8,
0xDB,0xBB,0xC2,0xDB,0x04,0xDE,0x8E,0xF9,0x2E,0x8E,0xFC,0x14,0x1F,0xBE,0xCA,0xA6,
0x28,0x7C,0x59,0x47,0x4E,0x6B,0xC0,0x5D,0x99,0xB2,0x96,0x4F,0xA0,0x90,0xC3,0xA2,
0x23,0x3B,0xA1,0x86,0x51,0x5B,0xE7,0xED,0x1F,0x61,0x29,0x70,0xCE,0xE2,0xD7,0xAF,
0xB8,0x1B,0xDD,0x76,0x21,0x70,0x48,0x1C,0xD0,0x06,0x91,0x27,0xD5,0xB0,0x5A,0xA9,
0x93,0xB4,0xEA,0x98,0x8D,0x8F,0xDD,0xC1,0x86,0xFF,0xB7,0xDC,0x90,0xA6,0xC0,0x8F,
0x4D,0xF4,0x35,0xC9,0x34,0x02,0x84,0x92,0x36,0xC3,0xFA,0xB4,0xD2,0x7C,0x70,0x26,
0xC1,0xD4,0xDC,0xB2,0x60,0x26,0x46,0xDE,0xC9,0x75,0x1E,0x76,0x3D,0xBA,0x37,0xBD,
0xF8,0xFF,0x94,0x06,0xAD,0x9E,0x53,0x0E,0xE5,0xDB,0x38,0x2F,0x41,0x30,0x01,0xAE,
0xB0,0x6A,0x53,0xED,0x90,0x27,0xD8,0x31,0x17,0x97,0x27,0xB0,0x86,0x5A,0x89,0x18,
0xDA,0x3E,0xDB,0xEB,0xCF,0x9B,0x14,0xED,0x44,0xCE,0x6C,0xBA,0xCE,0xD4,0xBB,0x1B,
0xDB,0x7F,0x14,0x47,0xE6,0xCC,0x25,0x4B,0x33,0x20,0x51,0x51,0x2B,0xD7,0xAF,0x42,
0x6F,0xB8,0xF4,0x01,0x37,0x8C,0xD2,0xBF,0x59,0x83,0xCA,0x01,0xC6,0x4B,0x92,0xEC,
0xF0,0x32,0xEA,0x15,0xD1,0x72,0x1D,0x03,0xF4,0x82,0xD7,0xCE,0x6E,0x74,0xFE,0xF6,
0xD5,0x5E,0x70,0x2F,0x46,0x98,0x0C,0x82,0xB5,0xA8,0x40,0x31,0x90,0x0B,0x1C,0x9E,
0x59,0xE7,0xC9,0x7F,0xBE,0xC7,0xE8,0xF3,0x23,0xA9,0x7A,0x7E,0x36,0xCC,0x88,0xBE,
0x0F,0x1D,0x45,0xB7,0xFF,0x58,0x5A,0xC5,0x4B,0xD4,0x07,0xB2,0x2B,0x41,0x54,0xAA,
0xCC,0x8F,0x6D,0x7E,0xBF,0x48,0xE1,0xD8,0x14,0xCC,0x5E,0xD2,0x0F,0x80,0x37,0xE0,
0xA7,0x97,0x15,0xEE,0xF2,0x9B,0xE3,0x28,0x06,0xA1,0xD5,0x8B,0xB7,0xC5,0xDA,0x76,
0xF5,0x50,0xAA,0x3D,0x8A,0x1F,0xBF,0xF0,0xEB,0x19,0xCC,0xB1,0xA3,0x13,0xD5,0x5C,
0xDA,0x56,0xC9,0xEC,0x2E,0xF2,0x96,0x32,0x38,0x7F,0xE8,0xD7,0x6E,0x3C,0x04,0x68,
0x04,0x3E,0x8F,0x66,0x3F,0x48,0x60,0xEE,0x12,0xBF,0x2D,0x5B,0x0B,0x74,0x74,0xD6,
0xE6,0x94,0xF9,0x1E,0x6D,0xCC,0x40,0x24,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);

IKE_DH_GROUP[IKE_GROUP_MODP_8192] = raw_string(
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xC9,0x0F,0xDA,0xA2,0x21,0x68,0xC2,0x34,
0xC4,0xC6,0x62,0x8B,0x80,0xDC,0x1C,0xD1,0x29,0x02,0x4E,0x08,0x8A,0x67,0xCC,0x74,
0x02,0x0B,0xBE,0xA6,0x3B,0x13,0x9B,0x22,0x51,0x4A,0x08,0x79,0x8E,0x34,0x04,0xDD,
0xEF,0x95,0x19,0xB3,0xCD,0x3A,0x43,0x1B,0x30,0x2B,0x0A,0x6D,0xF2,0x5F,0x14,0x37,
0x4F,0xE1,0x35,0x6D,0x6D,0x51,0xC2,0x45,0xE4,0x85,0xB5,0x76,0x62,0x5E,0x7E,0xC6,
0xF4,0x4C,0x42,0xE9,0xA6,0x37,0xED,0x6B,0x0B,0xFF,0x5C,0xB6,0xF4,0x06,0xB7,0xED,
0xEE,0x38,0x6B,0xFB,0x5A,0x89,0x9F,0xA5,0xAE,0x9F,0x24,0x11,0x7C,0x4B,0x1F,0xE6,
0x49,0x28,0x66,0x51,0xEC,0xE4,0x5B,0x3D,0xC2,0x00,0x7C,0xB8,0xA1,0x63,0xBF,0x05,
0x98,0xDA,0x48,0x36,0x1C,0x55,0xD3,0x9A,0x69,0x16,0x3F,0xA8,0xFD,0x24,0xCF,0x5F,
0x83,0x65,0x5D,0x23,0xDC,0xA3,0xAD,0x96,0x1C,0x62,0xF3,0x56,0x20,0x85,0x52,0xBB,
0x9E,0xD5,0x29,0x07,0x70,0x96,0x96,0x6D,0x67,0x0C,0x35,0x4E,0x4A,0xBC,0x98,0x04,
0xF1,0x74,0x6C,0x08,0xCA,0x18,0x21,0x7C,0x32,0x90,0x5E,0x46,0x2E,0x36,0xCE,0x3B,
0xE3,0x9E,0x77,0x2C,0x18,0x0E,0x86,0x03,0x9B,0x27,0x83,0xA2,0xEC,0x07,0xA2,0x8F,
0xB5,0xC5,0x5D,0xF0,0x6F,0x4C,0x52,0xC9,0xDE,0x2B,0xCB,0xF6,0x95,0x58,0x17,0x18,
0x39,0x95,0x49,0x7C,0xEA,0x95,0x6A,0xE5,0x15,0xD2,0x26,0x18,0x98,0xFA,0x05,0x10,
0x15,0x72,0x8E,0x5A,0x8A,0xAA,0xC4,0x2D,0xAD,0x33,0x17,0x0D,0x04,0x50,0x7A,0x33,
0xA8,0x55,0x21,0xAB,0xDF,0x1C,0xBA,0x64,0xEC,0xFB,0x85,0x04,0x58,0xDB,0xEF,0x0A,
0x8A,0xEA,0x71,0x57,0x5D,0x06,0x0C,0x7D,0xB3,0x97,0x0F,0x85,0xA6,0xE1,0xE4,0xC7,
0xAB,0xF5,0xAE,0x8C,0xDB,0x09,0x33,0xD7,0x1E,0x8C,0x94,0xE0,0x4A,0x25,0x61,0x9D,
0xCE,0xE3,0xD2,0x26,0x1A,0xD2,0xEE,0x6B,0xF1,0x2F,0xFA,0x06,0xD9,0x8A,0x08,0x64,
0xD8,0x76,0x02,0x73,0x3E,0xC8,0x6A,0x64,0x52,0x1F,0x2B,0x18,0x17,0x7B,0x20,0x0C,
0xBB,0xE1,0x17,0x57,0x7A,0x61,0x5D,0x6C,0x77,0x09,0x88,0xC0,0xBA,0xD9,0x46,0xE2,
0x08,0xE2,0x4F,0xA0,0x74,0xE5,0xAB,0x31,0x43,0xDB,0x5B,0xFC,0xE0,0xFD,0x10,0x8E,
0x4B,0x82,0xD1,0x20,0xA9,0x21,0x08,0x01,0x1A,0x72,0x3C,0x12,0xA7,0x87,0xE6,0xD7,
0x88,0x71,0x9A,0x10,0xBD,0xBA,0x5B,0x26,0x99,0xC3,0x27,0x18,0x6A,0xF4,0xE2,0x3C,
0x1A,0x94,0x68,0x34,0xB6,0x15,0x0B,0xDA,0x25,0x83,0xE9,0xCA,0x2A,0xD4,0x4C,0xE8,
0xDB,0xBB,0xC2,0xDB,0x04,0xDE,0x8E,0xF9,0x2E,0x8E,0xFC,0x14,0x1F,0xBE,0xCA,0xA6,
0x28,0x7C,0x59,0x47,0x4E,0x6B,0xC0,0x5D,0x99,0xB2,0x96,0x4F,0xA0,0x90,0xC3,0xA2,
0x23,0x3B,0xA1,0x86,0x51,0x5B,0xE7,0xED,0x1F,0x61,0x29,0x70,0xCE,0xE2,0xD7,0xAF,
0xB8,0x1B,0xDD,0x76,0x21,0x70,0x48,0x1C,0xD0,0x06,0x91,0x27,0xD5,0xB0,0x5A,0xA9,
0x93,0xB4,0xEA,0x98,0x8D,0x8F,0xDD,0xC1,0x86,0xFF,0xB7,0xDC,0x90,0xA6,0xC0,0x8F,
0x4D,0xF4,0x35,0xC9,0x34,0x02,0x84,0x92,0x36,0xC3,0xFA,0xB4,0xD2,0x7C,0x70,0x26,
0xC1,0xD4,0xDC,0xB2,0x60,0x26,0x46,0xDE,0xC9,0x75,0x1E,0x76,0x3D,0xBA,0x37,0xBD,
0xF8,0xFF,0x94,0x06,0xAD,0x9E,0x53,0x0E,0xE5,0xDB,0x38,0x2F,0x41,0x30,0x01,0xAE,
0xB0,0x6A,0x53,0xED,0x90,0x27,0xD8,0x31,0x17,0x97,0x27,0xB0,0x86,0x5A,0x89,0x18,
0xDA,0x3E,0xDB,0xEB,0xCF,0x9B,0x14,0xED,0x44,0xCE,0x6C,0xBA,0xCE,0xD4,0xBB,0x1B,
0xDB,0x7F,0x14,0x47,0xE6,0xCC,0x25,0x4B,0x33,0x20,0x51,0x51,0x2B,0xD7,0xAF,0x42,
0x6F,0xB8,0xF4,0x01,0x37,0x8C,0xD2,0xBF,0x59,0x83,0xCA,0x01,0xC6,0x4B,0x92,0xEC,
0xF0,0x32,0xEA,0x15,0xD1,0x72,0x1D,0x03,0xF4,0x82,0xD7,0xCE,0x6E,0x74,0xFE,0xF6,
0xD5,0x5E,0x70,0x2F,0x46,0x98,0x0C,0x82,0xB5,0xA8,0x40,0x31,0x90,0x0B,0x1C,0x9E,
0x59,0xE7,0xC9,0x7F,0xBE,0xC7,0xE8,0xF3,0x23,0xA9,0x7A,0x7E,0x36,0xCC,0x88,0xBE,
0x0F,0x1D,0x45,0xB7,0xFF,0x58,0x5A,0xC5,0x4B,0xD4,0x07,0xB2,0x2B,0x41,0x54,0xAA,
0xCC,0x8F,0x6D,0x7E,0xBF,0x48,0xE1,0xD8,0x14,0xCC,0x5E,0xD2,0x0F,0x80,0x37,0xE0,
0xA7,0x97,0x15,0xEE,0xF2,0x9B,0xE3,0x28,0x06,0xA1,0xD5,0x8B,0xB7,0xC5,0xDA,0x76,
0xF5,0x50,0xAA,0x3D,0x8A,0x1F,0xBF,0xF0,0xEB,0x19,0xCC,0xB1,0xA3,0x13,0xD5,0x5C,
0xDA,0x56,0xC9,0xEC,0x2E,0xF2,0x96,0x32,0x38,0x7F,0xE8,0xD7,0x6E,0x3C,0x04,0x68,
0x04,0x3E,0x8F,0x66,0x3F,0x48,0x60,0xEE,0x12,0xBF,0x2D,0x5B,0x0B,0x74,0x74,0xD6,
0xE6,0x94,0xF9,0x1E,0x6D,0xBE,0x11,0x59,0x74,0xA3,0x92,0x6F,0x12,0xFE,0xE5,0xE4,
0x38,0x77,0x7C,0xB6,0xA9,0x32,0xDF,0x8C,0xD8,0xBE,0xC4,0xD0,0x73,0xB9,0x31,0xBA,
0x3B,0xC8,0x32,0xB6,0x8D,0x9D,0xD3,0x00,0x74,0x1F,0xA7,0xBF,0x8A,0xFC,0x47,0xED,
0x25,0x76,0xF6,0x93,0x6B,0xA4,0x24,0x66,0x3A,0xAB,0x63,0x9C,0x5A,0xE4,0xF5,0x68,
0x34,0x23,0xB4,0x74,0x2B,0xF1,0xC9,0x78,0x23,0x8F,0x16,0xCB,0xE3,0x9D,0x65,0x2D,
0xE3,0xFD,0xB8,0xBE,0xFC,0x84,0x8A,0xD9,0x22,0x22,0x2E,0x04,0xA4,0x03,0x7C,0x07,
0x13,0xEB,0x57,0xA8,0x1A,0x23,0xF0,0xC7,0x34,0x73,0xFC,0x64,0x6C,0xEA,0x30,0x6B,
0x4B,0xCB,0xC8,0x86,0x2F,0x83,0x85,0xDD,0xFA,0x9D,0x4B,0x7F,0xA2,0xC0,0x87,0xE8,
0x79,0x68,0x33,0x03,0xED,0x5B,0xDD,0x3A,0x06,0x2B,0x3C,0xF5,0xB3,0xA2,0x78,0xA6,
0x6D,0x2A,0x13,0xF8,0x3F,0x44,0xF8,0x2D,0xDF,0x31,0x0E,0xE0,0x74,0xAB,0x6A,0x36,
0x45,0x97,0xE8,0x99,0xA0,0x25,0x5D,0xC1,0x64,0xF3,0x1C,0xC5,0x08,0x46,0x85,0x1D,
0xF9,0xAB,0x48,0x19,0x5D,0xED,0x7E,0xA1,0xB1,0xD5,0x10,0xBD,0x7E,0xE7,0x4D,0x73,
0xFA,0xF3,0x6B,0xC3,0x1E,0xCF,0xA2,0x68,0x35,0x90,0x46,0xF4,0xEB,0x87,0x9F,0x92,
0x40,0x09,0x43,0x8B,0x48,0x1C,0x6C,0xD7,0x88,0x9A,0x00,0x2E,0xD5,0xEE,0x38,0x2B,
0xC9,0x19,0x0D,0xA6,0xFC,0x02,0x6E,0x47,0x95,0x58,0xE4,0x47,0x56,0x77,0xE9,0xAA,
0x9E,0x30,0x50,0xE2,0x76,0x56,0x94,0xDF,0xC8,0x1F,0x56,0xE8,0x80,0xB9,0x6E,0x71,
0x60,0xC9,0x80,0xDD,0x98,0xED,0xD3,0xDF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF
);


#
# IKE vendor signatures
#

# Signatures are from the ike-scan project. Props to Roy Hills (http://www.nta-monitor.com/ike-scan/)
ike_sig[0] = hex2raw(s:"ad2c0dd0b9c32083ccba25b8861ec455");
ike_vendor[0] = "A GSS-API Authentication Method for IKE    ";
ike_sig[1] = hex2raw(s:"b46d8914f3aaa3f2fedeb7c7db2943ca");
ike_vendor[1] = "A GSS-API Authentication Method for IKE\n  ";
ike_sig[2] = hex2raw(s:"bdb41038a7ec5e5534dd004d0f91f927");
ike_vendor[2] = "Cisco IOS";
ike_sig[3] = hex2raw(s:"12f5f28c457168a9702d9fe274cc0100");
ike_vendor[3] = "Cisco Unity";
ike_sig[4] = hex2raw(s:"afcad71368a1f1c96b8696fc7757....");
ike_vendor[4] = "Dead Peer Detection";
ike_sig[5] = hex2raw(s:"6a7434c19d7e36348090a02334c9c805");
ike_vendor[5] = "draft-huttunen-ipsec-esp-in-udp-00.txt";
ike_sig[6] = hex2raw(s:"4485152d18b6bbcd0be8a8469579ddcc");
ike_vendor[6] = "draft-ietf-ipsec-nat-t-ike-00";
ike_sig[7] = hex2raw(s:"16f6ca16e4a4066d83821a0f0aeaa862");
ike_vendor[7] = "draft-ietf-ipsec-nat-t-ike-01";
ike_sig[8] = hex2raw(s:"cd60464335df21f87cfdb2fc68b6a448");
ike_vendor[8] = "draft-ietf-ipsec-nat-t-ike-02";
ike_sig[9] = hex2raw(s:"90cb80913ebb696e086381b5ec427b1f");
ike_vendor[9] = "draft-ietf-ipsec-nat-t-ike-02";
ike_sig[10] = hex2raw(s:"7d9419a65310ca6f2c179d9215529d56");
ike_vendor[10] = "draft-ietf-ipsec-nat-t-ike-03";
ike_sig[11] = hex2raw(s:"27bab5dc01ea0760ea4e3190ac27c0d0");
ike_vendor[11] = "draft-stenberg-ipsec-nat-traversal-01";
ike_sig[12] = hex2raw(s:"6105c422e76847e43f9684801292aecd");
ike_vendor[12] = "draft-stenberg-ipsec-nat-traversal-02";
ike_sig[13] = hex2raw(s:"50760f624c63e5c53eea386c685ca083");
ike_vendor[13] = "ESPThruNAT";
ike_sig[14] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f00000001000000020000000000000000");
ike_vendor[14] = "Firewall-1 4.1 Base";
ike_sig[15] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f00000001000000030000000000000000");
ike_vendor[15] = "Firewall-1 4.1 SP1";
ike_sig[16] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f0000000100000fa20000000000000000");
ike_vendor[16] = "Firewall-1 4.1 SP2-SP6";
ike_sig[17] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f000000010000138c0000000000000000");
ike_vendor[17] = "Firewall-1 NG AI R54";
ike_sig[18] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f000000010000138d0000000000000000");
ike_vendor[18] = "Firewall-1 NG AI R55";
ike_sig[19] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f00000001000013880000000000000000");
ike_vendor[19] = "Firewall-1 NG Base";
ike_sig[20] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f00000001000013890000000000000000");
ike_vendor[20] = "Firewall-1 NG FP1";
ike_sig[21] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f000000010000138a0000000000000000");
ike_vendor[21] = "Firewall-1 NG FP2";
ike_sig[22] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f000000010000138b0000000000000000");
ike_vendor[22] = "Firewall-1 NG FP3";
ike_sig[23] = hex2raw(s:"f4ed19e0c114eb516faaac0ee37daf2807b4381f");
ike_vendor[23] = "Firewall-1 Unknown Vsn";
ike_sig[24] = hex2raw(s:"621b04bb09882ac1e15935fefa24aeee");
ike_vendor[24] = "GSSAPI";
ike_sig[25] = hex2raw(s:"4865617274426561745f4e6f74696679");
ike_vendor[25] = "Heartbeat Notify";
ike_sig[26] = hex2raw(s:"4048b7d56ebce88525e7de7f00d6c2d3");
ike_vendor[26] = "IKE Fragmentation";
ike_sig[27] = hex2raw(s:"7003cbc1097dbe9c2600ba6983bc8b35");
ike_vendor[27] = "KAME/racoon";
ike_sig[28] = hex2raw(s:"1e2b516905991c7d7c96fcbfb587e461");
ike_vendor[28] = "MS NT5 ISAKMPOAKLEY";
ike_sig[29] = hex2raw(s:"9b096d9ac3275a7d6fe8b91c583111b09efed1a0");
ike_vendor[29] = "Netscreen";
ike_sig[30] = hex2raw(s:"4f70656e5047503130313731");
ike_vendor[30] = "OpenPGP";
ike_sig[31] = hex2raw(s:"da8e9378");
ike_vendor[31] = "Safenet or Watchguard";
ike_sig[32] = hex2raw(s:"47bbe7c993f1fc13b4e6d0db565c68e5");
ike_vendor[32] = "SafeNet SoftRemote";
ike_sig[33] = hex2raw(s:"fbf47614984031fa8e3bb6198089b223");
ike_vendor[33] = "SSH IPSEC Express 1.1.0";
ike_sig[34] = hex2raw(s:"1952dc91ac20f646fb01cf42a33aee30");
ike_vendor[34] = "SSH IPSEC Express 1.1.1";
ike_sig[35] = hex2raw(s:"e8bffa643e5c8f2cd10fda7370b6ebe5");
ike_vendor[35] = "SSH IPSEC Express 1.1.2";
ike_sig[36] = hex2raw(s:"c1111b2dee8cbc3d620573ec57aab9cb");
ike_vendor[36] = "SSH IPSEC Express 1.2.1";
ike_sig[37] = hex2raw(s:"09ec27bfbc09c75823cfecbffe565a2e");
ike_vendor[37] = "SSH IPSEC Express 1.2.2";
ike_sig[38] = hex2raw(s:"7f21a596e4e318f0b2f4944c2384cb84");
ike_vendor[38] = "SSH IPSEC Express 2.0.0";
ike_sig[39] = hex2raw(s:"2836d1fd2807bc9e5ae30786320451ec");
ike_vendor[39] = "SSH IPSEC Express 2.1.0";
ike_sig[40] = hex2raw(s:"a68de756a9c5229bae66498040951ad5");
ike_vendor[40] = "SSH IPSEC Express 2.1.1";
ike_sig[41] = hex2raw(s:"3f2372867e237c1cd8250a75559cae20");
ike_vendor[41] = "SSH IPSEC Express 2.1.2";
ike_sig[42] = hex2raw(s:"0e58d5774df602007d0b02443660f7eb");
ike_vendor[42] = "SSH IPSEC Express 3.0.0";
ike_sig[43] = hex2raw(s:"f5ce31ebc210f44350cf71265b57380f");
ike_vendor[43] = "SSH IPSEC Express 3.0.1";
ike_sig[44] = hex2raw(s:"f64260af2e2742daddd56987068a99a0");
ike_vendor[44] = "SSH IPSEC Express 4.0.0";
ike_sig[45] = hex2raw(s:"7a54d3bdb3b1e6d923892064be2d981c");
ike_vendor[45] = "SSH IPSEC Express 4.0.1";
ike_sig[46] = hex2raw(s:"9aa1f3b43472a45d5f506aeb260cf214");
ike_vendor[46] = "SSH IPSEC Express 4.1.0";
ike_sig[47] = hex2raw(s:"6880c7d026099114e486c55430e7abee");
ike_vendor[47] = "SSH IPSEC Express 4.2.0";
ike_sig[48] = hex2raw(s:"054182a07c7ae206f9d2cf9d2432c482");
ike_vendor[48] = "SSH Sentinel";
ike_sig[49] = hex2raw(s:"b91623e693ca18a54c6a2778552305e8");
ike_vendor[49] = "SSH Sentinel 1.1";
ike_sig[50] = hex2raw(s:"5430888de01a31a6fa8f60224e449958");
ike_vendor[50] = "SSH Sentinel 1.2";
ike_sig[51] = hex2raw(s:"7ee5cb85f71ce259c94a5c731ee4e752");
ike_vendor[51] = "SSH Sentinel 1.3";
ike_sig[52] = hex2raw(s:"eb4b0d96276b4e220ad16221a7b2a5e6");
ike_vendor[52] = "SSH Sentinel 1.4.1";
ike_sig[53] = hex2raw(s:"63d9a1a7009491b5a0a6fdeb2a8284f0");
ike_vendor[53] = "SSH Sentinel 1.4";
ike_sig[54] = hex2raw(s:"c40fee00d5d39ddb1fc762e09b7cfea7");
ike_vendor[54] = "Testing NAT-T RFC";
ike_sig[55] = hex2raw(s:"54494d4553544550");
ike_vendor[55] = "Timestep";
ike_sig[56] = hex2raw(s:"975b7816f69789600dda89040576e0db");
ike_vendor[56] = "Unknown VPN Vendor";
ike_sig[57] = hex2raw(s:"1f07f70eaa6514d3b0fa96542a");
ike_vendor[57] = "Cisco VPN Concentrator";
ike_sig[58] = hex2raw(s:"edea53a3c15d45cafb11e59ea68db2aa99c1470e0000000400000303");
ike_vendor[58] = "Unknown VPN Vendor";
ike_sig[59] = hex2raw(s:"bedc86dabf0ab7973870b5e6c4b87d3ee824de310000001000000401");
ike_vendor[59] = "Unknown VPN Vendor";
ike_sig[60] = hex2raw(s:"ac5078c25cabb9523979978e76a3d0d2426bc9260000000400000401");
ike_vendor[60] = "Unknown VPN Vendor";
ike_sig[61] = hex2raw(s:"69b761a173cc1471dc4547d2a5e94812");
ike_vendor[61] = "Unknown VPN Vendor";
ike_sig[62] = hex2raw(s:"4c5647362e303a627269636b3a362e302e353732");
ike_vendor[62] = "Unknown VPN Vendor";
ike_sig[63] = hex2raw(s:"3499691eb82f9eaefed378f5503671debd0663b4000000040000023c");
ike_vendor[63] = "Unknown VPN Vendor";
ike_sig[64] = hex2raw(s:"e23ae9f51a46876ff93d89ba725d649d");
ike_vendor[64] = "Unknown Cisco VPN";
ike_sig[65] = hex2raw(s:"1e2b516905991c7d7c96fcbfb587e46100000002");
ike_vendor[65] = "Windows-2000";
ike_sig[66] = hex2raw(s:"1e2b516905991c7d7c96fcbfb587e461000000040d000014");
ike_vendor[66] = "Windows-2003";
ike_sig[67] = hex2raw(s:"1e2b516905991c7d7c96fcbfb587e4610000000300000000");
ike_vendor[67] = "Windows-XP";
ike_sig[68] = hex2raw(s:"1e2b516905991c7d7c96fcbfb587e46100000005");
ike_vendor[68] = "Windows-Vista";
ike_sig[69] = hex2raw(s:"09002689dfd6b712");
ike_vendor[69] = "XAUTH";

# New Sigs

ike_sig[70] = hex2raw(s:"4485152d18b6bbcc0be8a8469579ddcc");
ike_vendor[70] = "avaya";
ike_sig[71] = hex2raw(s:"afcad71368a1f1c96b8696fc77570100");
ike_vendor[71] = "Dead Peer Detection v1.0";
ike_sig[72] = hex2raw(s:"8db7a41811221660");
ike_vendor[72] = "draft-ietf-ipsec-heartbeats-00";
ike_sig[73] = hex2raw(s:"4df37928e9fc4fd1b3262170d515c662");
ike_vendor[73] = "draft-ietf-ipsec-nat-t-ike";
ike_sig[74] = hex2raw(s:"9909b64eed937c6573de52ace952fa6b");
ike_vendor[74] = "draft-ietf-ipsec-nat-t-ike-04";
ike_sig[75] = hex2raw(s:"80d0bb3def54565ee84645d4c85ce3ee");
ike_vendor[75] = "draft-ietf-ipsec-nat-t-ike-05";
ike_sig[76] = hex2raw(s:"4d1e0e136deafa34c4f3ea9f02ec7285");
ike_vendor[76] = "draft-ietf-ipsec-nat-t-ike-06";
ike_sig[77] = hex2raw(s:"439b59f8ba676c4c7737ae22eab8f582");
ike_vendor[77] = "draft-ietf-ipsec-nat-t-ike-07";
ike_sig[78] = hex2raw(s:"8f8d83826d246b6fc7a8a6a428c11de8");
ike_vendor[78] = "draft-ietf-ipsec-nat-t-ike-08";
ike_sig[79] = hex2raw(s:"42ea5b6f898d9773a575df26e7dd19e1");
ike_vendor[79] = "draft-ietf-ipsec-nat-t-ike-09";
ike_sig[80] = hex2raw(s:"325df29a2319f2dd");
ike_vendor[80] = "draft-krywaniuk-ipsec-antireplay-00";
ike_sig[81] = hex2raw(s:"1d6e178f6c2c0be284985465450fe9d4");
ike_vendor[81] = "FortiGate";
ike_sig[82] = hex2raw(s:"4a131c81070358455c5728f20e95452f");
ike_vendor[82] = "RFC 3947 NAT-T";
ike_sig[83] = hex2raw(s:"85b6cbec480d5c8cd9882c825ac2c244");
ike_vendor[83] = "strongSwan 2.2.0";
ike_sig[84] = hex2raw(s:"d9118b1e9de5efced9cc9d883f2168ff");
ike_vendor[84] = "strongSwan 2.2.1";
ike_sig[85] = hex2raw(s:"99dc7cc823376b3b33d04357896ae07b");
ike_vendor[85] = "strongSwan 2.2.2";
ike_sig[86] = hex2raw(s:"b8f92b2fa2d3fe5fe158344bda1cc6ae");
ike_vendor[86] = "strongSwan 2.3.0";
ike_sig[87] = hex2raw(s:"f697c1afcc2ec8ddcdf99dc7af03a67f");
ike_vendor[87] = "strongSwan 2.3.1";
ike_sig[88] = hex2raw(s:"42a4834c92ab9a7777063afa254bcb69");
ike_vendor[88] = "strongSwan 2.3.2";
ike_sig[89] = hex2raw(s:"e829c88149bab3c0cee85da60e18ae9b");
ike_vendor[89] = "strongSwan 2.4.0";
ike_sig[90] = hex2raw(s:"75b0653cb281eb26d31ede38c8e1e228");
ike_vendor[90] = "strongSwan 2.4.1";
ike_sig[91] = hex2raw(s:"e7a3fd0c6d771a8f1b8a86a4169c9ea4");
ike_vendor[91] = "strongSwan 2.4.2";
ike_sig[92] = hex2raw(s:"982b7a063a33c143a8eadc88249f6bcc");
ike_vendor[92] = "strongSwan 2.4.3";
ike_sig[93] = hex2raw(s:"485a70361b4433b31dea1c6be0df243e");
ike_vendor[93] = "strongSwan 2.4.4";
ike_sig[94] = hex2raw(s:"9eb3d907ed7ada4e3cbcacb917abc8e4");
ike_vendor[94] = "strongSwan 2.5.0";
ike_sig[95] = hex2raw(s:"9a4a4648f60f8eda7cfcbfe271ee5b7d");
ike_vendor[95] = "strongSwan 2.5.1";
ike_sig[96] = hex2raw(s:"861ce5eb72164b190e9e629a31cf4901");
ike_vendor[96] = "strongSwan 2.5.2";
ike_sig[97] = hex2raw(s:"df5b1f0f1d5679d9f8512b16c55a6065");
ike_vendor[97] = "strongSwan 2.5.3";
ike_sig[98] = hex2raw(s:"7a6bf5b7df89642a75a78ef7d657c1c0");
ike_vendor[98] = "strongSwan 2.5.4";
ike_sig[99] = hex2raw(s:"3f267ed621ada7ee6c7d8893ccb0b14b");
ike_vendor[99] = "strongSwan 2.5.5";
ike_sig[100] = hex2raw(s:"3c5eba3d8564928e32ae43c3d9924dee");
ike_vendor[100] = "strongSwan 2.5.6";
ike_sig[101] = hex2raw(s:"1f4442296b83d7e33a8b45209ba0e590");
ike_vendor[101] = "strongSwan 2.5.7";
ike_sig[102] = hex2raw(s:"3f3266499ffdbd85950e702298062844");
ike_vendor[102] = "strongSwan 2.6.0";
ike_sig[103] = hex2raw(s:"66afbc12bbfe6ce108b1f69f4bc917b7");
ike_vendor[103] = "strongSwan 2.6.1";
ike_sig[104] = hex2raw(s:"5b1cd6fe7d050eda6c93871c107db3d2");
ike_vendor[104] = "strongSwan 2.6.2";
ike_sig[105] = hex2raw(s:"b2860e7837f711bef3d0eeb106872ded");
ike_vendor[105] = "strongSwan 2.6.3";
ike_sig[106] = hex2raw(s:"b927f95219a0fe3600dba3c1182ae55f");
ike_vendor[106] = "strongSwan 2.6.4";
ike_sig[107] = hex2raw(s:"07fa128e4754f9447b1dd46374eef360");
ike_vendor[107] = "strongSwan 2.7.0";
ike_sig[108] = hex2raw(s:"8134878582121785ba65ea345d6ba724");
ike_vendor[108] = "strongSwan 2.7.1";
ike_sig[109] = hex2raw(s:"a194e2aaddd0bafb95253dd96dc733eb");
ike_vendor[109] = "strongSwan 2.7.2";
ike_sig[110] = hex2raw(s:"7f50cc4ebf04c2d9da73abfd69b77aa2");
ike_vendor[110] = "strongSwan 2.7.3";
ike_sig[111] = hex2raw(s:"32f0e9b9c06dfe8c9ad5599a636971a1");
ike_vendor[111] = "strongSwan 2.8.0";
ike_sig[112] = hex2raw(s:"2ce9c946a4c879bf11b50b76cc5692cb");
ike_vendor[112] = "strongSwan 4.0.0";
ike_sig[113] = hex2raw(s:"9dbbafcf1db0dd595ae065294003ad3e");
ike_vendor[113] = "strongSwan 4.0.1";
ike_sig[114] = hex2raw(s:"77e8eea6f556a499de3ffe7f7f95661c");
ike_vendor[114] = "strongSwan 4.0.2";
ike_sig[115] = hex2raw(s:"b181b18e114fc209b3c6e26c3a80718e");
ike_vendor[115] = "strongSwan 4.0.3";
ike_sig[116] = hex2raw(s:"1ef283f83549b5ff9608b6d634f84d75");
ike_vendor[116] = "strongSwan 4.0.4";
ike_sig[117] = hex2raw(s:"dd180d21e5ce655a768ba32211dd8ad9");
ike_vendor[117] = "strongSwan 4.0.5";
ike_sig[118] = hex2raw(s:"8404adf9cda05760b2ca292e4bff537b");
ike_vendor[118] = "Sidewinder G2 ??";
ike_sig[119] = hex2raw(s:"e720cdd49d2ee7b83ce1970a6c69b528");
ike_vendor[119] = "Sidewinder G2 ??";
ike_sig[120] = hex2raw(s:"b037a21aceccb5570f602546f97bde8c");
ike_vendor[120] = "SSH IPSEC Express 5.0";
ike_sig[121] = hex2raw(s:"2b2dad97c4d140930053287f996850b0");
ike_vendor[121] = "SSH IPSEC Express 5.0.0";
ike_sig[122] = hex2raw(s:"45e17f3abe93944cb202910c59ef806b");
ike_vendor[122] = "SSH IPSEC Express 5.1.0";
ike_sig[123] = hex2raw(s:"5925859f7377ed7816d2fb81c01fa551");
ike_vendor[123] = "SSH IPSEC Express 5.1.1";
ike_sig[124] = hex2raw(s:"404bf439522ca3f6");
ike_vendor[124] = "SonicWall";
ike_sig[125] = hex2raw(s:"37eba0c4136184e7daf8562a77060b4a");
ike_vendor[125] = "SSH QuickSec 0.9.0";
ike_sig[126] = hex2raw(s:"5d72925e55948a9661a7fc48fdec7ff9");
ike_vendor[126] = "SSH QuickSec 1.1.0";
ike_sig[127] = hex2raw(s:"777fbf4c5af6d1cdd4b895a05bf82594");
ike_vendor[127] = "SSH QuickSec 1.1.1";
ike_sig[128] = hex2raw(s:"2cdf08e712ede8a5978761267cd19b91");
ike_vendor[128] = "SSH QuickSec 1.1.2";
ike_sig[129] = hex2raw(s:"59e454a8c2cf02a34959121f1890bc87");
ike_vendor[129] = "SSH QuickSec 1.1.3";
ike_sig[130] = hex2raw(s:"c573b056d7faca36c2fba28374127cbf");
ike_vendor[130] = "StoneGate-01";
ike_sig[131] = hex2raw(s:"baeb239037e17787d730eed9d95d48aa");
ike_vendor[131] = "StoneGate-02";
ike_sig[132] = hex2raw(s:"526170746f7220506f77657256706e20536572766572205b56382e315d");
ike_vendor[132] = "Symantec-Raptor-v8.1";
ike_sig[133] = hex2raw(s:"526170746f7220506f77657256706e20536572766572");
ike_vendor[133] = "Symantec-Raptor";
ike_sig[134] = hex2raw(s:"4f45486b7d44784d42676b5d");
ike_vendor[134] = "Linux FreeS/WAN 2.00";
ike_sig[135] = hex2raw(s:"4f457c4f547e6e615b426e56");
ike_vendor[135] = "Linux FreeS/WAN 2.01";
ike_sig[136] = hex2raw(s:"4f456c6b44696d7f6b4c4e60");
ike_vendor[136] = "Linux FreeS/WAN 2.02";
ike_sig[137] = hex2raw(s:"4f45566671474962734e6264");
ike_vendor[137] = "Linux FreeS/WAN 2.03";
ike_sig[138] = hex2raw(s:"4f45704f736579505c6e5f6d");
ike_vendor[138] = "Linux FreeS/WAN 2.04";
ike_sig[139] = hex2raw(s:"4f457271785f4c7e496f4d54");
ike_vendor[139] = "Linux FreeS/WAN 2.05";
ike_sig[140] = hex2raw(s:"4f457e4c466e5d427c5c6b52");
ike_vendor[140] = "Linux FreeS/WAN 2.06";
ike_sig[141] = hex2raw(s:"4d6163204f53582031302e78");
ike_vendor[141] = "MacOS 10.x";
ike_sig[142] = hex2raw(s:"26244d38eddb61b3172a36e3d0cfb819");
ike_vendor[142] = "Microsoft Initial-Contact";
ike_sig[143] = hex2raw(s:"299ee8289f40a8973bc78687e2e7226b532c3b760000000900000500");
ike_vendor[143] = "ns5xp 5.0.0rx.0";
ike_sig[144] = hex2raw(s:"4a4340b543e02b84c88a8b96a8af9ebe77d9accc0000000b00000500");
ike_vendor[144] = "ns5gt 5.0.0r7.1";
ike_sig[145] = hex2raw(s:"64405f46f03b7660a23be116a1975058e69e83870000000400000403");
ike_vendor[145] = "ns5xp 4.0.3r3.0";
ike_sig[146] = hex2raw(s:"2a2bcac19b8e91b426107807e02e7249569d6fd30000000b0000050a");
ike_vendor[146] = "ns5gt 5.1.0r1.0";
ike_sig[147] = hex2raw(s:"2a2bcac19b8e91b426107807e02e7249569d6fd3");
ike_vendor[147] = "Netscreen-14";
ike_sig[148] = hex2raw(s:"166f932d55eb64d8e4df4fd37e2313f0d0fd84510000000000000000");
ike_vendor[148] = "ns5gt 5.4.0r1.0";
ike_sig[149] = hex2raw(s:"299ee8289f40a8973bc78687e2e7226b532c3b76");
ike_vendor[149] = "Netscreen-01";
ike_sig[150] = hex2raw(s:"3a15e1f3cf2a63582e3ac82d1c64cbe3b6d779e7");
ike_vendor[150] = "Netscreen-02";
ike_sig[151] = hex2raw(s:"47d2b126bfcd83489760e2cf8c5d4d5a03497c15");
ike_vendor[151] = "Netscreen-03";
ike_sig[152] = hex2raw(s:"4a4340b543e02b84c88a8b96a8af9ebe77d9accc");
ike_vendor[152] = "Netscreen-04";
ike_sig[153] = hex2raw(s:"b858d1addd08c1e8adafea150608aa4497aa6cc8");
ike_vendor[153] = "XyXEL ZyWALL Router";
ike_sig[154] = hex2raw(s:"64405f46f03b7660a23be116a1975058e69e8387");
ike_vendor[154] = "Netscreen-05";
ike_sig[155] = hex2raw(s:"699369228741c6d4ca094c93e242c9de19e7b7c6");
ike_vendor[155] = "Netscreen-06";
ike_sig[156] = hex2raw(s:"8c0dc6cf62a0ef1b5c6eabd1b67ba69866adf16a");
ike_vendor[156] = "Netscreen-07";
ike_sig[157] = hex2raw(s:"92d27a9ecb31d99246986d3453d0c3d57a222a61");
ike_vendor[157] = "Netscreen-08";
ike_sig[158] = hex2raw(s:"bf03746108d746c904f1f3547de24f78479fed12");
ike_vendor[158] = "Netscreen-10";
ike_sig[159] = hex2raw(s:"c2e80500f4cc5fbf5daaeed3bb59abaeee56c652");
ike_vendor[159] = "Netscreen-11";
ike_sig[160] = hex2raw(s:"c8660a62b03b1b6130bf781608d32a6a8d0fb89f");
ike_vendor[160] = "Netscreen-12";
ike_sig[161] = hex2raw(s:"f885da40b1e7a9abd17655ec5bbec0f21f0ed52e");
ike_vendor[161] = "Netscreen-13";
ike_sig[162] = hex2raw(s:"166f932d55eb64d8e4df4fd37e2313f0d0fd8451");
ike_vendor[162] = "Netscreen-15";
ike_sig[163] = hex2raw(s:"a35bfd05ca1ac0b3d2f24e9e82bfcbff9c9e52b5");
ike_vendor[163] = "Netscreen-16";
ike_sig[164] = hex2raw(s:"4f4548724b6e5e68557c604f");
ike_vendor[164] = "Openswan 2.2.0";
ike_sig[165] = hex2raw(s:"4f4572696f5c77557f746249");
ike_vendor[165] = "Openswan 2.3.0";
ike_sig[166] = hex2raw(s:"f6f7efc7f5aeb8cb158cb9d094ba69e7");
ike_vendor[166] = "VPN-3000-client";
# Cisco IOS 15.2
ike_sig[167]    = "CISCO-DELETE-REASON";
ike_vendor[167] = "CISCO-DELETE-REASON";
ike_sig[168]    = "FLEXVPN-SUPPORTED";
ike_vendor[168] = "FLEXVPN-SUPPORTED";

# Signatures updates
# StrongSwan (2.8.1 - 2.8.8, 3.0.6 - 3.3.5, current)
ike_sig[169] = hex2raw(s:"e37f2d5ba89a62cd202ee27dac06c8a8");
ike_vendor[169] = "strongSwan 2.8.1";
ike_sig[170] = hex2raw(s:"299932277b7dfe382ce23465333a7d23");
ike_vendor[170] = "strongSwan 2.8.2";
ike_sig[171] = hex2raw(s:"fb4641ad0eeb2a34491d15f4eff51063");
ike_vendor[171] = "strongSwan 2.8.3";
ike_sig[172] = hex2raw(s:"76c72bfd398424dd001b86d0012fe061");
ike_vendor[172] = "strongSwan 2.8.4";
ike_sig[173] = hex2raw(s:"4c7efa31b39e510432a317570d97bbb9");
ike_vendor[173] = "strongSwan 2.8.5";
ike_sig[174] = hex2raw(s:"fe3f49706e26a9fb36a87bfce9ea36ce");
ike_vendor[174] = "strongSwan 2.8.6";
ike_sig[175] = hex2raw(s:"3a0d4e7ca4e492ed4dfe476d1ac6018b");
ike_vendor[175] = "strongSwan 2.8.7";
ike_sig[176] = hex2raw(s:"8c4a3bcb729b11f703d22a5b39640ca8");
ike_vendor[176] = "strongSwan 2.8.8";
ike_sig[177] = hex2raw(s:"4c90136946577b51919d8d9a6b8e4a9f");
ike_vendor[177] = "strongSwan 4.0.6";
ike_sig[178] = hex2raw(s:"ab0746221cc8fd0d5238f73a9b3da557");
ike_vendor[178] = "strongSwan 4.0.7";
ike_sig[179] = hex2raw(s:"4794cef6843422980d1a3d06af41c5cd");
ike_vendor[179] = "strongSwan 4.1.0";
ike_sig[180] = hex2raw(s:"d3f1c488c368175d5f40a8f5ca5f5e12");
ike_vendor[180] = "strongSwan 4.1.1";
ike_sig[181] = hex2raw(s:"15a1ace7ee52fddfef04f928db2dd134");
ike_vendor[181] = "strongSwan 4.1.2";
ike_sig[182] = hex2raw(s:"5849ab6d8beabd6e4d09e5a3b88c089a");
ike_vendor[182] = "strongSwan 4.1.3";
ike_sig[183] = hex2raw(s:"312f9cb1a6b90e19de7528c904ac3087");
ike_vendor[183] = "strongSwan 4.1.4";
ike_sig[184] = hex2raw(s:"bf0fbf7306ebb7827042d893539886e2");
ike_vendor[184] = "strongSwan 4.1.5";
ike_sig[185] = hex2raw(s:"d19683368af4b0edc21ccde982b1d1b0");
ike_vendor[185] = "strongSwan 4.1.6";
ike_sig[186] = hex2raw(s:"ea840aa4dfc9712d6c32b5a16eb329a3");
ike_vendor[186] = "strongSwan 4.1.7";
ike_sig[187] = hex2raw(s:"66a2045507c119da78a4666259cdea48");
ike_vendor[187] = "strongSwan 4.1.8";
ike_sig[188] = hex2raw(s:"78fdd287def01a3f074b5369eab4fd1c");
ike_vendor[188] = "strongSwan 4.1.9";
ike_sig[189] = hex2raw(s:"bf3a89ae5bef8e72d44dac8bb88d7d5f");
ike_vendor[189] = "strongSwan 4.1.10";
ike_sig[190] = hex2raw(s:"b7bd9f2f978e3259a7aa9f7a1396ad6c");
ike_vendor[190] = "strongSwan 4.1.11";
ike_sig[191] = hex2raw(s:"9f68901325a972894335302a9531ab9f");
ike_vendor[191] = "strongSwan 4.2.0";
ike_sig[192] = hex2raw(s:"bab253f4cb10a8108a7c927c56c87886");
ike_vendor[192] = "strongSwan 4.2.1";
ike_sig[193] = hex2raw(s:"2a517d0d23c37d08bce7c292a0217b39");
ike_vendor[193] = "strongSwan 4.2.2";
ike_sig[194] = hex2raw(s:"2d1f406118fbd5d28474791ffa00488a");
ike_vendor[194] = "strongSwan 4.2.3";
ike_sig[195] = hex2raw(s:"cd5792d4b70f0299a6a1373de236d2ac");
ike_vendor[195] = "strongSwan 4.2.4";
ike_sig[196] = hex2raw(s:"af0a05e0bd37b0aba0135a194abb5b89");
ike_vendor[196] = "strongSwan 4.2.5";
ike_sig[197] = hex2raw(s:"a2782dd683b5edee3b777f897d2b867e");
ike_vendor[197] = "strongSwan 4.2.6";
ike_sig[198] = hex2raw(s:"4ddc7e1f6d6cd1ae9d5dcac58fa1fe9a");
ike_vendor[198] = "strongSwan 4.2.7";
ike_sig[199] = hex2raw(s:"95569ee23ebb62eddedea353a575faf3");
ike_vendor[199] = "strongSwan 4.2.8";
ike_sig[200] = hex2raw(s:"488c08f57afc382112f7cb396f2d4f6c");
ike_vendor[200] = "strongSwan 4.2.9";
ike_sig[201] = hex2raw(s:"1aa158ae7f11e77d75ec801db53f7ec5");
ike_vendor[201] = "strongSwan 4.2.10";
ike_sig[202] = hex2raw(s:"05ceccd8e985fe0669eac282f803292a");
ike_vendor[202] = "strongSwan 4.2.11";
ike_sig[203] = hex2raw(s:"bc7d89b8b6b760391b1206e3ab391328");
ike_vendor[203] = "strongSwan 4.2.12";
ike_sig[204] = hex2raw(s:"5c14651ffd4af6383f5ba29177c2729a");
ike_vendor[204] = "strongSwan 4.2.13";
ike_sig[205] = hex2raw(s:"de014540e78dd8768bfb6c5238ede75f");
ike_vendor[205] = "strongSwan 4.2.14";
ike_sig[206] = hex2raw(s:"97be0b4b8506e40943ac2e1933ec2ca2");
ike_vendor[206] = "strongSwan 4.2.15";
ike_sig[207] = hex2raw(s:"4da33eb5f94ebf6d849c89a75803c50b");
ike_vendor[207] = "strongSwan 4.2.16";
ike_sig[208] = hex2raw(s:"79cf939352cdee20c8fb228e264826ad");
ike_vendor[208] = "strongSwan 4.2.17";
ike_sig[209] = hex2raw(s:"9deb74e751f44c47905ed2fad93f9271");
ike_vendor[209] = "strongSwan 4.3.0";
ike_sig[210] = hex2raw(s:"20b1f62b240a52a849309183960cbb64");
ike_vendor[210] = "strongSwan 4.3.1";
ike_sig[211] = hex2raw(s:"d6263956ac790961a9c8409b393724bf");
ike_vendor[211] = "strongSwan 4.3.2";
ike_sig[212] = hex2raw(s:"f9f093629308b24388d09c3f026de0a8");
ike_vendor[212] = "strongSwan 4.3.3";
ike_sig[213] = hex2raw(s:"e37e5d64a329a5cf1eeb8546c3b06018");
ike_vendor[213] = "strongSwan 4.3.4";
ike_sig[214] = hex2raw(s:"de5c703801952d85f6b3ed33b33784b4");
ike_vendor[214] = "strongSwan 4.3.5";
# StrongSwan Vendor ID from 4.3.6 to current version.
ike_sig[215] = hex2raw(s:"882fe56d6fd20dbc2251613b2ebe5beb");
ike_vendor[215] = "strongSwan";

# OpenSwan Vendor ID?
ike_sig[216] = hex2raw(s:"4f455d787a5b6948787a655b");
ike_vendor[216] = "Openswan 2.1.0";
ike_sig[217] = hex2raw(s:"4f45466a786e57484d4d4361");
ike_vendor[217] = "Openswan 2.1.1";
ike_sig[218] = hex2raw(s:"4f4555656771407e63636578");
ike_vendor[218] = "Openswan 2.1.2";
#
# Openswan 2.2.0 and 2.3.0 are recorded as
#  ID # 164 for 2.2.0
#  ID # 165 for 2.3.0
#
ike_sig[219] = hex2raw(s:"4f45454355706e735d625c71");
ike_vendor[219] = "Openswan 2.3.1";
ike_sig[220] = hex2raw(s:"4f45785c567c6f61507e7864");
ike_vendor[220] = "Openswan 2.4.0";
ike_sig[221] = hex2raw(s:"4f456e5e4c737d7d62796c51");
ike_vendor[221] = "Openswan 2.4.1";
ike_sig[222] = hex2raw(s:"4f45666a6343554b5f7a4062");
ike_vendor[222] = "Openswan 2.4.2";
ike_sig[223] = hex2raw(s:"4f4547407c7673775449546e");
ike_vendor[223] = "Openswan 2.4.3";
ike_sig[224] = hex2raw(s:"4f45565e6441545f4a664642");
ike_vendor[224] = "Openswan 2.4.4";
ike_sig[225] = hex2raw(s:"4f45587d5d4b4b7c61487b7c");
ike_vendor[225] = "Openswan 2.4.5";
ike_sig[226] = hex2raw(s:"4f45636e6542785f6f6b7257");
ike_vendor[226] = "Openswan 2.4.6";
ike_sig[227] = hex2raw(s:"4f4552756a414d79434d4951");
ike_vendor[227] = "Openswan 2.4.7";
ike_sig[228] = hex2raw(s:"4f457a6d734b6f476273616c");
ike_vendor[228] = "Openswan 2.4.8";
ike_sig[229] = hex2raw(s:"4f45414c5d6a75516450457a");
ike_vendor[229] = "Openswan 2.4.9";
ike_sig[230] = hex2raw(s:"4f456971726d54726e464a71");
ike_vendor[230] = "Openswan 2.4.10";
ike_sig[231] = hex2raw(s:"4f4550484948576e64636f6b");
ike_vendor[231] = "Openswan 2.4.11";
ike_sig[232] = hex2raw(s:"4f456c7c5b79725e4a6a5658");
ike_vendor[232] = "Openswan 2.4.12";
ike_sig[233] = hex2raw(s:"4f45445e597f60634770436c");
ike_vendor[233] = "Openswan 2.4.13";
ike_sig[234] = hex2raw(s:"4f454c4e767d475b775e6f56");
ike_vendor[234] = "Openswan 2.4.14";
ike_sig[235] = hex2raw(s:"4f45675d5e5d7f664c604651");
ike_vendor[235] = "Openswan 2.4.15";
ike_sig[236] = hex2raw(s:"4f4546477e5e4b5440606859");
ike_vendor[236] = "Openswan 2.5.0";
ike_sig[237] = hex2raw(s:"4f45495c767449495c5a7350");
ike_vendor[237] = "Openswan 2.5.00";
ike_sig[238] = hex2raw(s:"4f457260466858434c7e6a45");
ike_vendor[238] = "Openswan 2.5.01";
ike_sig[239] = hex2raw(s:"4f45717a7c715b657c5c5156");
ike_vendor[239] = "Openswan 2.5.02";
ike_sig[240] = hex2raw(s:"4f456651517b4f475276654d");
ike_vendor[240] = "Openswan 2.5.03";
ike_sig[241] = hex2raw(s:"4f455672606d794f697d7242");
ike_vendor[241] = "Openswan 2.5.04";
ike_sig[242] = hex2raw(s:"4f454a4d5e5e674c604e4168");
ike_vendor[242] = "Openswan 2.5.05";
ike_sig[243] = hex2raw(s:"4f454a6176624e5876754d64");
ike_vendor[243] = "Openswan 2.5.06";
ike_sig[244] = hex2raw(s:"4f455c47464946434875464e");
ike_vendor[244] = "Openswan 2.5.07";
ike_sig[245] = hex2raw(s:"4f455a6f776e666c49497b68");
ike_vendor[245] = "Openswan 2.5.08";
ike_sig[246] = hex2raw(s:"4f454c4f577c5a7c4c665248");
ike_vendor[246] = "Openswan 2.5.09";
ike_sig[247] = hex2raw(s:"4f45714250575765766a6c72");
ike_vendor[247] = "Openswan 2.5.10";
ike_sig[248] = hex2raw(s:"4f457a795c6440407166776c");
ike_vendor[248] = "Openswan 2.5.11";
ike_sig[249] = hex2raw(s:"4f4549796c524b7c515b5450");
ike_vendor[249] = "Openswan 2.5.12";
ike_sig[250] = hex2raw(s:"4f45455740667a5f766d785d");
ike_vendor[250] = "Openswan 2.5.13";
ike_sig[251] = hex2raw(s:"4f45736b7f50645f6c416341");
ike_vendor[251] = "Openswan 2.5.14";
ike_sig[252] = hex2raw(s:"4f45675e407f696148444f7c");
ike_vendor[252] = "Openswan 2.5.15";
ike_sig[253] = hex2raw(s:"4f4557575d58474e5d574e58");
ike_vendor[253] = "Openswan 2.5.16";
ike_sig[254] = hex2raw(s:"4f457a74437b794a6148685b");
ike_vendor[254] = "Openswan 2.5.17";
ike_sig[255] = hex2raw(s:"4f455e74654a504c7a614967");
ike_vendor[255] = "Openswan 2.5.18";
ike_sig[256] = hex2raw(s:"4f45766b71776b6f48467a69");
ike_vendor[256] = "Openswan 2.6.01";
ike_sig[257] = hex2raw(s:"4f455f525758674a61465b6b");
ike_vendor[257] = "Openswan 2.6.02";
ike_sig[258] = hex2raw(s:"4f45775376797c60516a757b");
ike_vendor[258] = "Openswan 2.6.03";
ike_sig[259] = hex2raw(s:"4f45736f4c6569475a7d7f4c");
ike_vendor[259] = "Openswan 2.6.04";
ike_sig[260] = hex2raw(s:"4f457b654a44434170427663");
ike_vendor[260] = "Openswan 2.6.05";
ike_sig[261] = hex2raw(s:"4f454a4376414f737d6e495f");
ike_vendor[261] = "Openswan 2.6.06";
ike_sig[262] = hex2raw(s:"4f45466b5d7b4753765c686b");
ike_vendor[262] = "Openswan 2.6.07";
ike_sig[263] = hex2raw(s:"4f457d456755615659534c7b");
ike_vendor[263] = "Openswan 2.6.08";
ike_sig[264] = hex2raw(s:"4f455a447e4d547d6d416e6c");
ike_vendor[264] = "Openswan 2.6.09";
ike_sig[265] = hex2raw(s:"4f45744a61537c7646486641");
ike_vendor[265] = "Openswan 2.6.10";
ike_sig[266] = hex2raw(s:"4f455e7f4c79574b43455465");
ike_vendor[266] = "Openswan 2.6.11";
ike_sig[267] = hex2raw(s:"4f45775b5b5e5b705443404e");
ike_vendor[267] = "Openswan 2.6.12";
ike_sig[268] = hex2raw(s:"4f455a7f4b47466754526564");
ike_vendor[268] = "Openswan 2.6.13";
ike_sig[269] = hex2raw(s:"4f456f534a55776561714158");
ike_vendor[269] = "Openswan 2.6.14";
ike_sig[270] = hex2raw(s:"4f4563476e586e5f567a5457");
ike_vendor[270] = "Openswan 2.6.15";
ike_sig[271] = hex2raw(s:"4f456a7d637357765a5c7b63");
ike_vendor[271] = "Openswan 2.6.16";
ike_sig[272] = hex2raw(s:"4f4554704245584355764571");
ike_vendor[272] = "Openswan 2.6.17";
ike_sig[273] = hex2raw(s:"4f457d5a765a404d5b4f5744");
ike_vendor[273] = "Openswan 2.6.18";
ike_sig[274] = hex2raw(s:"4f456b71484c42504f664d44");
ike_vendor[274] = "Openswan 2.6.19";
ike_sig[275] = hex2raw(s:"4f4543714271574c644b7a41");
ike_vendor[275] = "Openswan 2.6.20";
ike_sig[276] = hex2raw(s:"4f457e717f6b5a4e727d576b");
ike_vendor[276] = "Openswan 2.6.21";
ike_sig[277] = hex2raw(s:"4f456c6a405d72544d42754d");
ike_vendor[277] = "Openswan 2.6.22";
ike_sig[278] = hex2raw(s:"4f456d406b6753464548407f");
ike_vendor[278] = "Openswan 2.6.23";
ike_sig[279] = hex2raw(s:"4f45557d6068416e77737478");
ike_vendor[279] = "Openswan 2.6.24";
ike_sig[280] = hex2raw(s:"4f4543606e547b776f5e5848");
ike_vendor[280] = "Openswan 2.6.25";
ike_sig[281] = hex2raw(s:"4f45504b7e7a764d4e645f57");
ike_vendor[281] = "Openswan 2.6.26";
ike_sig[282] = hex2raw(s:"4f456e544e77494c76567e5c");
ike_vendor[282] = "Openswan 2.6.27";
ike_sig[283] = hex2raw(s:"4f45517b4f7f6e657a7b4351");
ike_vendor[283] = "Openswan 2.6.28";
ike_sig[284] = hex2raw(s:"4f455e5a65725d6564727763");
ike_vendor[284] = "Openswan 2.6.29";
ike_sig[285] = hex2raw(s:"4f457656736b546968656675");
ike_vendor[285] = "Openswan 2.6.30";
ike_sig[286] = hex2raw(s:"4f457d476e447f5a4159655b");
ike_vendor[286] = "Openswan 2.6.31";
ike_sig[287] = hex2raw(s:"4f4568794c64414365636661");
ike_vendor[287] = "Openswan 2.6.32";
ike_sig[288] = hex2raw(s:"4f456768495f775c414c4679");
ike_vendor[288] = "Openswan 2.6.33";
ike_sig[289] = hex2raw(s:"4f457f7e637f7679517f4a5a");
ike_vendor[289] = "Openswan 2.6.34";
ike_sig[290] = hex2raw(s:"4f457e487a746b6f69705842");
ike_vendor[290] = "Openswan 2.6.35";
ike_sig[291] = hex2raw(s:"4f45716c74725d4b5a6c5d5f");
ike_vendor[291] = "Openswan 2.6.36";
ike_sig[292] = hex2raw(s:"4f45755c645c6a795c5c6170");
ike_vendor[292] = "Openswan 2.6.37";
ike_sig[293] = hex2raw(s:"4f4576795c6b677a57715c73");
ike_vendor[293] = "Openswan 2.6.38";
ike_sig[294] = hex2raw(s:"4f456d6470475f6c477d767d");
ike_vendor[294] = "Openswan 2.6.39";
ike_sig[295] = hex2raw(s:"4f53577666617a6f6355505A");
ike_vendor[295] = "Openswan 2.6.40";
ike_sig[216] = hex2raw(s:"4f535751624a50497c705f61");
ike_vendor[216] = "Openswan 2.6.42";
ike_sig[217] = hex2raw(s:"4f535773786c6a4640545359");
ike_vendor[217] = "Openswan 2.6.41";

global_var _ike_port_unreachable;

##
# Creates a IKE header
#
# @param ispi [data] Initiator SPI (known as Initiator Cookie in IKEv1)
# @param rspi [data] Responder SPI (known as Responder Cookie in IKEv1)
# @param payload [int] type of the first payload following the header
# @param mj_ver [int] IKE major version
# @param mn_ver [int] IKE minor version
# @param exch [int] Exchange type
# @param flags [int] Header flags
# @param msgid [int] Message ID
# @param len [int] Total length of the IKE PDU
#
# @return [data] formatted IKE header
# @remark see RFC 5996, section 3.1 for IKEv2, or RFC 2408, section 3.1 for IKEv1
#
##
function ike_hdr(ispi, rspi, payload, mj_ver, mn_ver, exch, flags, msgid, len)
{
  local_var hdr;

  hdr = ispi +
        rspi +
        mkbyte(payload) +
        mkbyte(((mj_ver & 0xF) << 4) | mn_ver & 0xF) +
        mkbyte(exch) +
        mkbyte(flags) +
        mkdword(msgid) +
        mkdword(len); # total length of isakm PDU, include length of this hdr

  return hdr;
}

##
# Parses a IKE header
#
# @anonparam [data] Data starting with a IKE header
# @return [array] Parsed IKE header, or NULL if the header doesn't contain a valid IKE version.
# @remark See ike_hdr() for field definitions
#
##
function ike_get_hdr()
{
  local_var data, hdr, mj_ver, pos;

  data = _FCT_ANON_ARGS[0];

  # Check len
  if(strlen(data) < IKE_HDR_SIZE) return NULL;

  # Get version
  mj_ver = (getbyte(blob:data, pos:17) >> 4) & 0xf;
  if(mj_ver == IKE_MAJOR_VERSION_1)
  {
    hdr['icookie']      = substr(data, 0, 7);
    hdr['rcookie']      = substr(data, 8, 15);
  }
  else if( mj_ver == IKE_MAJOR_VERSION_2)
  {
    hdr['ispi']      = substr(data, 0, 7);
    hdr['rspi']      = substr(data, 8, 15);
  }
  # Unknown version
  else return NULL;

  # Get rest of the fields
  pos = 16;
  hdr['np']           = getbyte(blob:data, pos:pos);  pos += 1;
  hdr['mj_ver']       = mj_ver;
  hdr['mn_ver']       = getbyte(blob:data, pos:pos) & 0xf; pos += 1;
  hdr['exch']         = getbyte(blob:data, pos:pos);  pos += 1;
  hdr['flags']        = getbyte(blob:data, pos:pos);  pos += 1;
  hdr['msgid']        = getdword(blob:data, pos:pos); pos += 4;
  hdr['len']          = getdword(blob:data, pos:pos);

  return hdr;
}

##
# Parses a generic IKE payload header
#
# @param blob [data] Data blob containing the payload header
# @param pos  [int]  Position in the blob where the header starts
# @return [array] ret['np'] Next payload type
#                 ret['c']  Whether the payload is critical; this field is only meaningful for IKEv2
#                 ret['len'] Total length of the payload, including the payload header
# @remark
#   If the data blob doesn't contain enough bytes for the header, it returns NULL.
#
##
function ike_get_payload_hdr(blob, pos)
{
  local_var hdr, len;

  len = strlen(blob);
  if(pos + IKE_PAYLOAD_HDR_SIZE > len) return NULL;

  hdr['np']   = getbyte(blob:blob, pos: pos + 0);
  hdr['c']    = (getbyte(blob:blob, pos: pos + 1) >> 7) & 0x1; # valid only for IKEv2
  hdr['len']  = getword(blob:blob, pos: pos + 2);

  return hdr;
}

##
# Parses a IKE payload
#
# @param blob [data] Data blob containing the payload
# @param pos  [int]  Position in the blob where the payload starts
# @return [array] ret['np'] Next payload type
#                 ret['c']  Whether the payload is critical; this field is only meaningful in IKEv2
#                 ret['len'] Total length of the payload, including the payload header
#                 ret['raw_data']  Unparsed payload data
# @remark
#   If data blob doesn't contain enough bytes for the payload, it returns NULL.
##
function ike_get_payload(blob, pos)
{
  local_var len, phdr, ret;

  phdr = ike_get_payload_hdr(blob:blob, pos:pos);
  if(isnull(phdr)) return NULL;

  # Blob should encompass payload
  if(pos + phdr['len'] > strlen(blob))
    return NULL;

  # Get payload value
  pos += IKE_PAYLOAD_HDR_SIZE;
  len = phdr['len'] - IKE_PAYLOAD_HDR_SIZE;

  ret['raw_data']  = substr(blob, pos, pos + len -1); # payload raw data
  ret['np']     = phdr['np'];  # next payload type
  ret['len']    = phdr['len']; # payload len, including payload hdr
  ret['c']      = phdr['c'];   # critical bit

  return ret;

}

##
# Parses a IKE PDU
#
# @anonparam [data] IKE PDU
# @return ret['hdr'] - see ike_get_hdr() for returned fields
#         ret['payloads'] - a list of payloads, each payload object has the following fields:
#                           payload['type'] - payload type
#                           payload['raw_data'] - payload data
#                           payload['len']  - payload length, including payload hdr
#                           payload['np']   - payload type after this payload
#                           payload['c']    - payload critical bit. (Meaningful only in IKEv2)
#
# @remark
#    The function returns NULL if the input data is an invalid IKE PDU.
#
##
function ike_parse()
{
  local_var hdr, i, len, list, np, p, pdu, pos, ret;

  pdu = _FCT_ANON_ARGS[0];

  # PDU length
  len = strlen(pdu);

  hdr = ike_get_hdr(pdu);
  if(isnull(hdr)) return NULL;

  # Check len
  if(hdr['len'] != len) return NULL;

  np = hdr['np'];
  pos = IKE_HDR_SIZE;

  # Process payloads
  i = 0;
  while(np != 0 && pos < len)
  {
    p = ike_get_payload(blob: pdu, pos:pos);
    if(isnull(p)) return NULL;

    p['type'] = np;
    list[i++] = p;

    # Next payload
    np = p['np'];
    pos += p['len'];
  }

  ret['hdr'] = hdr;
  ret['payloads'] = list;

  return ret;
}

#
# For debugging only
#
function ike_dump()
{
  local_var hdr, p, payloads, pdu, ret;
  pdu = _FCT_ANON_ARGS[0];

  ret = ike_parse(pdu);

  if(isnull(ret))
  {
    display('ike_parse() failed\n');
    return;
  }

  hdr      = ret['hdr'];
  payloads = ret['payloads'];
  if(hdr['mj_ver'] == IKE_MAJOR_VERSION_1)
  {
    dump(ddata:hdr['icookie'], dtitle:'icookie');
    dump(ddata:hdr['rcookie'], dtitle:'rcookie');
  }
  else if(hdr['mj_ver'] == IKE_MAJOR_VERSION_2)
  {
    dump(ddata:hdr['ispi'], dtitle:'ispi');
    dump(ddata:hdr['rspi'], dtitle:'rspi');
  }

  display('next payload: ', hdr['np'], '\n');
  display('version:      ', hdr['mj_ver'], '.', hdr['mn_ver'], '\n');
  display('exch_type:    ', hdr['exch'], '\n');
  display('flags:        ', hdr['flags'], '\n');
  display('msgid:        ', hdr['msgid'], '\n');
  display('length:       ', hdr['len'], '\n');

  foreach p (payloads)
  {
    dump(ddata:p['raw_data'], dtitle:'type_'+p['type']);
  }

}

##
# Create a IKE data attribute
#
# @param type [int] Attribute type
# @param value [int/data] Attribute value
# @return [data] Formatted IKE date attribute
# @remark
#   The function returns NULL if an invalid attribute type or value is specified.
#
##
function ike_attr(type, value)
{
  local_var attr, vlen;

  # Check params
  if(typeof(type) != 'int') return NULL;
  if(type > 0x7fff) return NULL;

  if(typeof(value) == 'int')
  {
    if(value < 0xffff)
      value = mkword(value);
    else
      value = mkdword(value);
  }

  vlen = strlen(value);
  if(vlen > 0xffff) return NULL;


  # Short attribute
  if(vlen <= 2)
  {
    type = type | 0x8000;
    attr = mkword(type) + value;
  }
  # Long attribute
  else
  {
    type = type & (~0x8000);
    attr = mkword(type) + mkword(vlen) + value;
  }

  return attr;
}

##
# Sends IKE PDU through a socket and wait for response
#
# @param socket [int] Socket to which to send IKE PDU
# @param data [data]  Data to send
# @return [data] Response to the IKE PDU if any
#
##
function ike_sendrecv(socket, data)
{
  send(socket:socket, data:data);

  # cannot read a bit of data at a time for UDP data
  return recv(socket:socket,length:4096);
}

##
# Extracts TCP/IP transport layer data from a link layer frame
#
# @param frame [data] Link layer frame
# @return [data] Transport layer data, without header (i.e., TCP/UDP header)
# @remark
#   The function returns NULL if it cannot extract the transport layer data from the frame.
#
##
function transport_data(frame)
{
  local_var ip, iphdr, payload, trans;

  if(isnull(frame)) return NULL;

  # Get IP packet
  ip = substr(frame, strlen(link_layer())); if (isnull(ip)) return NULL;

  # Split IP pkt into IP hdr and payload
  ip = packet_split(ip); if(isnull(ip)) return NULL;

  # IP payload
  payload = ip[2];

  # Transport layer data without transport header (i.e., TCP or UPD header)
  trans = payload['data'];

  return trans;
}

##
#
# Sends and Receives IKE PDU using pcap
#
# @param data [data] IKE PDU to send; Data size MUST fit in a layer 2 frame, or it won't get sent
# @param filter [string] Pcap filter for which a return packet should match
# @param timeout [int]  Capture timeout
# @return [data] First IKE PDU (starting with transport layer data) matching the filter
# @remark
#   - If the IKE PDU passed cannot fit in a layer 2 frame, the PDU is NOT sent
#   - We need to use pcap to specify source port 500;
#     some (older) IKE implementations will only respond to dest port 500.
#   - This function will limit calling plugins to only operate on IPv4.
#   - Calling plugins MUST NOT use IPv6 addresses.
#
#
##
function ike_pcap_sendrecv(data, filter, timeout)
{
  local_var bpf, frame,ip, ispi, ike, sent, t, udp;
  local_var icmp_type, icmp_code;

  if(strlen(data) < IKE_HDR_SIZE) return NULL;

  if(isnull(timeout)) timeout = 5;

  if(isnull(filter))
    filter = '(udp and src ' + get_host_ip() + ' and src port '+IKE_PORT+
             ' and dst '+ this_host() + ' and dst port '+IKE_PORT +')' +
             ' or (icmp and icmp[icmptype] = icmp-unreach and icmp[icmpcode] = 3 ' + # ICMP port unreachable for port 500
             ' and icmp[28:2] = '+IKE_PORT+ ' and icmp[30:2] = '+IKE_PORT+')';

  ip = forge_ip_packet(ip_v : 4,
                       ip_hl : 5,
                       ip_tos : 0,
                       ip_len : 20,
                       ip_id : 0xABBA,
                       ip_p : IPPROTO_UDP,
                       ip_ttl : 255,
                       ip_off : 0,
                       ip_src : this_host(),
                       ip_dst : get_host_ip());

	
  udp = forge_udp_packet(ip : ip,
                         uh_sport : IKE_PORT,
                         uh_dport : IKE_PORT,
                         uh_ulen : strlen(data) + 8,
                         data : data);

  # 8-byte initiator cookie (IKEv1) or ISPI (IKEv2)
  ispi = substr(data, 0 , 7);
  bpf = bpf_open(filter);
  if(isnull(bpf)) return NULL;

  _ike_port_unreachable = 0;
  sent = 0;

  #
  # we need to implement the timeout in a loop because:
  #  1) The IKE filter matches srchost:IKE_PORT and dsthost:IKE_PORT
  #  2) There are multiple plugins that uses same socket srchost:IKE_PORT <-> dsthost:IKE_PORT
  #
  #  So it's possible that the received IKE packet belongs to another IKE plugin.
  #  we solve this by grabbing all IKE packets within a given timeout period, peek inside the
  #  received IKE packet and see if the 8-byte ISPI matches the one the sender uses
  #
  t  = unixtime();
  repeat
  {
    # Send once and read wanted packet until received or timed out
    if(! sent)
    {
      ip = send_packet(udp, pcap_active:TRUE, pcap_filter:filter, pcap_timeout:timeout);
      # see if it's an ICMP port unreachable
      icmp_type = get_icmp_element(icmp:ip, element:"icmp_type");
      icmp_code = get_icmp_element(icmp:ip, element:"icmp_code");
      if(icmp_type == 3 && icmp_code == 3)
      {
        _ike_port_unreachable = 1;
        bpf_close(bpf);
        return NULL;
      }

      ike = get_udp_element(udp:ip, element:"data");
      sent = 1;
    }
    else
    {
      frame = bpf_next(bpf:bpf);
      #ike = transport_data(frame:frame);
      if(! isnull(frame))
      {
        ip = substr(frame, strlen(link_layer()));
        # see if it's an ICMP port unreachable
        icmp_type = get_icmp_element(icmp:ip, element:"icmp_type");
        icmp_code = get_icmp_element(icmp:ip, element:"icmp_code");
        if(icmp_type == 3 && icmp_code == 3)
        {
          _ike_port_unreachable = 1;
          bpf_close(bpf);
          return NULL;
        }
        ike = get_udp_element(udp:ip, element:"data");
      }
    }

    # When looking for a response to a request,
    # Make sure ispi in the response matches the one in the request
    if(strlen(ike) >= IKE_HDR_SIZE && substr(ike, 0 , 7) == ispi)
    {
      bpf_close(bpf);
      return ike;
    }
  }until(unixtime() - t > timeout);

  bpf_close(bpf);
  return NULL;
}

##
# Creates a cipher object
#
# @anonparam [int] Cipher ID
# @anonparam [int] Cipher key length
# @return [list]  ret[0] - Cipher ID
#                 ret[1] - Cipher key length
#
# @remark
#   If the second anonymous is not specified, the cipher uses a fixed key length or the key length is unknown.
#
##
function ike_cipher()
{
  local_var id, keylen, ret;

  id      = _FCT_ANON_ARGS[0];
  keylen  = _FCT_ANON_ARGS[1];

  if(isnull(id))  return NULL;
  if(isnull(keylen)) keylen = 0; # fixed key len or keylen unknown

  ret[0] = id;
  ret[1] = keylen;

  return ret;
}

STATUS_SUCCESS                = -1;
STATUS_FAILURE                = -2;
STATUS_FAILURE_UNEXPECTED     = -3;

##
# Creates a status object
#
# @anonparam [int] Caller-defined status code
# @anonparam [any] Caller-defined status info associated with status code
# @return [array] status['code'] status code
#                 status['info'] status info
#
##
function ike_status()
{
  local_var status;

  status['code'] = _FCT_ANON_ARGS[0];
  status['info'] = _FCT_ANON_ARGS[1];

  return status;
}

##
# Determines whether an item is in a list
#
# @param list [list]      The list to check the item for
# @param item [int/data/string]  The item to check for
# @return TRUE/FALSE
#
##
function item_in_list(list, item)
{
  local_var found, i;

  found = FALSE;
  for(i = 0; i < max_index(list); i++)
  {
    if(list[i] == item)
    {
      found = TRUE;
      break;
    }
  }
  return found;
}
