###
# (C) Tenable Network Security, Inc.
#
# @NOGPL@
#
# $Revision: 1.1 $
###

###
# This library implements the SQL Server Resolution Protocol
# http://msdn.microsoft.com/en-us/library/cc219703.aspx
###

##
# By default, SSRP will be served on the UDP port assigned by IANA and
# named Microsoft-SQL-Monitor (ms-sql-m).
##
global_var SSRP_PORT;
SSRP_PORT = 1434;

##
# The CLNT_BCAST_EX packet is a broadcast or multicast request that is
# generated by clients that are trying to identify the list of
# database instances on the network and their network protocol
# connection information.
##
global_var SSRP_CLNT_BCAST_EX;
SSRP_CLNT_BCAST_EX = 0x02;

##
# The CLNT_UCAST_EX packet is a unicast request that is generated by
# clients that are trying to identify the list of database instances
# and their network protocol connection information installed on a
# single machine.
##
global_var SSRP_CLNT_UCAST_EX;
SSRP_CLNT_UCAST_EX = 0x03;

##
# The CLNT_UCAST_INST packet is a request for information related to a
# specific instance.
##
global_var SSRP_CLNT_UCAST_INST;
SSRP_CLNT_UCAST_INST = 0x04;

##
# The CLNT_UCAST_DAC packet request is used to determine the TCP port
# on which the SQL Server dedicated administrator connection (DAC)
# endpoint is listening.
##
global_var SSRP_CLNT_UCAST_DAC;
SSRP_CLNT_UCAST_DAC = 0x0F;

##
# The server responds to all client requests with an SVR_RESP.
##
global_var SVR_RESP;
SSRP_SVR_RESP = 0x05;

##
# Parses an SSRP response from the server.
#
# @anonparam res The raw response from the server.
#
# @return An array of arrays of parsed fields.
##
function ssrp_parse()
{
  local_var attrs, code, i, inst, insts, items, len, pair, res;

  res = _FCT_ANON_ARGS[0];
  if (isnull(res))
    return NULL;

  # Verify minimum length.
  if (strlen(res) < 3)
    return NULL;

  # Verify response code.
  code = ord(res[0]);
  if (code != SSRP_SVR_RESP)
    return NULL;

  # Verify body length, stored little-endian.
  len = (ord(res[2]) << 8) | ord(res[1]);
  if (len != strlen(res) - 3)
    return NULL;

  # Cut out the body.
  res = substr(res, 3);

  # Parse the body.
  insts = make_array();
  foreach inst (split(res, sep:";;", keep:FALSE))
  {
    items = split(inst, sep:";", keep:FALSE);

    attrs = make_array();
    for (i = 0; i < max_index(items); i += 2)
    {
      attrs[items[i]] = items[i + 1];
    }

    if (!isnull(attrs["tcp"]))
      attrs["tcp"] = int(attrs["tcp"]);

    if (!isnull(attrs["InstanceName"]))
      insts[attrs["InstanceName"]] = attrs;
  }

  return insts;
}

##
# Send an SSRP request and get a response.
#
# @param port The port to send the request on (default 1434).
# @param req  The raw request to send.
#
# @return An array of arrays of parsed fields.
##
function ssrp_send_recv(port, req)
{
  local_var res, soc;

  if (isnull(req))
    return NULL;

  if (isnull(port))
    port = SSRP_PORT;

  if (!get_udp_port_state(port))
    return NULL;

  soc = open_sock_udp(port);
  if (!soc)
    return NULL;

  send(socket:soc, data:req);
  res = recv(socket:soc, length:1024);
  close(soc);

  return ssrp_parse(res);
}

##
# Enumerate all MSSQL instances and retrieve their information.
#
# @param port The port to send the request on (default 1434).
#
# @return An array of arrays of instance information.
##
function ssrp_inst_enum(port)
{
  local_var req;

  req = raw_string(SSRP_CLNT_UCAST_EX);

  return ssrp_send_recv(req:req, port:port);
}

##
# Retrieve the information for a named MSSQL instance.
#
# @param name The name of the instance to ask about.
# @param port The port to send the request on (default 1434).
#
# @return An array of instance information.
##
function ssrp_inst_info(name, port)
{
  local_var insts, req;

  if (isnull(name))
    return NULL;

  # Instance names must be uppercase.
  name = toupper(name);

  req = raw_string(
    SSRP_CLNT_UCAST_INST,
    name,
    0x00
  );

  insts = ssrp_send_recv(req:req, port:port);

  return insts[name];
}
